<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crossmint Client Signer Vault</title>
    <link rel="stylesheet" href="css/styles.css">
    <!-- For production use: -->
    <script src="js/dist/bundle.min.js"></script>
    
    <!-- For development use (uncomment when debugging): -->
    <!-- <script src="js/dist/bundle.js"></script> -->
</head>
<body>
    <div class="container">
        <h1>Crossmint Client Base58 & Storage</h1>
        <div class="status" id="status">Initialized...</div>
        
        <div class="demo-section">
            <h2>Base58 Encoding/Decoding</h2>
            <form id="base58-form">
                <div class="form-group">
                    <label for="hex-input">Hex Input:</label>
                    <input type="text" id="hex-input" placeholder="Enter hex string..." />
                    <button type="button" id="encode-btn">Encode to Base58</button>
                </div>
                <div class="form-group">
                    <label for="base58-input">Base58 Input:</label>
                    <input type="text" id="base58-input" placeholder="Enter Base58 string..." />
                    <button type="button" id="decode-btn">Decode to Hex</button>
                </div>
                <div class="form-group">
                    <label for="result">Result:</label>
                    <input type="text" id="result" readonly />
                </div>
            </form>
        </div>
        
        <div class="demo-section">
            <h2>IndexedDB Storage</h2>
            <form id="storage-form">
                <div class="form-group">
                    <label for="storage-id">ID:</label>
                    <input type="text" id="storage-id" required />
                </div>
                <div class="form-group">
                    <label for="storage-data">Data (JSON):</label>
                    <textarea id="storage-data" rows="5" placeholder='{"key": "value"}'></textarea>
                </div>
                <div class="form-group">
                    <button type="button" id="store-btn">Store</button>
                    <button type="button" id="retrieve-btn">Retrieve</button>
                    <button type="button" id="list-btn">List All</button>
                    <button type="button" id="delete-btn">Delete</button>
                </div>
            </form>
            <div id="storage-result" class="storage-result"></div>
        </div>
    </div>
    
    <div class="footer">
        Crossmint Client Base58 & Storage Demo
        <span class="version"></span>
    </div>

    <!-- Initialize demo -->
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize the XMIF framework
            if (window.XMIF) {
                window.XMIF.init()
                    .then(() => {
                        console.log('XMIF framework initialized');
                        document.getElementById('status').textContent = 'Ready';
                        
                        // Show version number in footer
                        document.querySelector('.version').textContent = `v${XMIF.version}`;
                        
                        // Set up Base58 demo
                        document.getElementById('encode-btn').addEventListener('click', () => {
                            try {
                                const hexInput = document.getElementById('hex-input').value;
                                const bytes = XMIF.format.fromHex(hexInput);
                                const base58Result = XMIF.format.toBase58(bytes);
                                document.getElementById('result').value = base58Result;
                            } catch (err) {
                                console.error('Error encoding:', err);
                                document.getElementById('result').value = `Error: ${err.message}`;
                            }
                        });
                        
                        document.getElementById('decode-btn').addEventListener('click', () => {
                            try {
                                const base58Input = document.getElementById('base58-input').value;
                                const bytes = XMIF.format.fromBase58(base58Input);
                                const hexResult = XMIF.format.toHex(bytes);
                                document.getElementById('result').value = hexResult;
                            } catch (err) {
                                console.error('Error decoding:', err);
                                document.getElementById('result').value = `Error: ${err.message}`;
                            }
                        });
                        
                        // Set up Storage demo
                        document.getElementById('store-btn').addEventListener('click', async () => {
                            try {
                                const id = document.getElementById('storage-id').value;
                                if (!id) throw new Error('ID is required');
                                
                                const dataString = document.getElementById('storage-data').value;
                                const data = JSON.parse(dataString);
                                
                                data.id = id;
                                data.created = new Date().toISOString();
                                
                                await XMIF.storeData(XMIF.Storage.KEYS_STORE, data);
                                showStorageResult('Data stored successfully');
                            } catch (err) {
                                console.error('Error storing data:', err);
                                showStorageResult(`Error: ${err.message}`);
                            }
                        });
                        
                        document.getElementById('retrieve-btn').addEventListener('click', async () => {
                            try {
                                const id = document.getElementById('storage-id').value;
                                if (!id) throw new Error('ID is required');
                                
                                const item = await XMIF.getData(XMIF.Storage.KEYS_STORE, id);
                                showStorageResult(item ? JSON.stringify(item, null, 2) : 'Item not found');
                            } catch (err) {
                                console.error('Error retrieving data:', err);
                                showStorageResult(`Error: ${err.message}`);
                            }
                        });
                        
                        document.getElementById('list-btn').addEventListener('click', async () => {
                            try {
                                const items = await XMIF.listData(XMIF.Storage.KEYS_STORE);
                                showStorageResult(items.length > 0 ? 
                                    JSON.stringify(items, null, 2) : 
                                    'No items found');
                            } catch (err) {
                                console.error('Error listing data:', err);
                                showStorageResult(`Error: ${err.message}`);
                            }
                        });
                        
                        document.getElementById('delete-btn').addEventListener('click', async () => {
                            try {
                                const id = document.getElementById('storage-id').value;
                                if (!id) throw new Error('ID is required');
                                
                                await XMIF.deleteData(XMIF.Storage.KEYS_STORE, id);
                                showStorageResult('Item deleted successfully');
                            } catch (err) {
                                console.error('Error deleting data:', err);
                                showStorageResult(`Error: ${err.message}`);
                            }
                        });
                        
                        function showStorageResult(text) {
                            const resultElement = document.getElementById('storage-result');
                            resultElement.innerHTML = text;
                            if (typeof text === 'string' && text.startsWith('Error:')) {
                                resultElement.classList.add('error');
                            } else {
                                resultElement.classList.remove('error');
                            }
                        }
                    })
                    .catch(err => {
                        console.error('Failed to initialize XMIF:', err);
                        document.getElementById('status').textContent = `Error: ${err.message}`;
                    });
            } else {
                document.getElementById('status').textContent = 'Error: XMIF not loaded';
            }
        });
    </script>
</body>
</html> 